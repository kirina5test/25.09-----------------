// Первый блок

// Создайте шапку страницы. Там должно быть название вашего сайта, лого и хотя бы 2 кнопки: главная и корзина.
// Стилизуйте как хотите, лишь бы было адекватно.
// Создайте второй документ с такой же шапкой, на который будет ссылаться кнопка корзина.
// Подключите к основной странице файл js, в нём создайте переменную с нашим JSON (показывал примерную).
// "Распарсите" JSON в какую-то переменную ( let новая = JSON.parse(старая) ).
// Получился массив, пробежитесь по нему в цикле ( for .. of ).
// Одна итерация цикла - один объект внутри массива - один будущий товар. Значит в цикле с помощью управления DOM-элементами создаём уже привычным образом (примерно как в крестиках-ноликах) наши товары.
// 7.1. В цикле создаём элемент для одного конкретного товара.
// 7.2. Добавляем этот элемент куда-то в наш main, а лучше даже в самом html создать один div-контейнер для хранения всех товаров.
// 7.3. В этот элемент добавляем 3 новых элемента: картинку (<img>), название (<p>, <h>, <div> - не важно), цена (так же).
// 7.4. Изменяем для картинки свойство img.src (img здесь - имя элемента), для названия и цены textContent.
// Стилизуем как хотим (у меня, например, флекс-бокс).

// Второй блок

// 9. Начнём создавать функционал добавления в корзину. Предлагаю добавить каждому товару кнопку.
//В реальности вариантов уйма: можно просто кликнуть на товар, можно сделать постоянную кнопку на товаре,
//можно сделать кнопку под товаром. У меня же кнопка появляется на товаре в тот момент, когда я на него навожу,
//можете сделать и так. При этом я сделал так, чтобы не обязательно было нажимать именно на кнопку,
// она скорее просто "сигнал" о том, что при нажатии на товар, он добавится в корзину. 9.1.
//В цикл создания ваших товаров добавьте создание кнопки. Например просто див с какой-то надписью и классом для стилизации.
// 9.2. Поиграйтесь со стилями так, чтобы вам нравилось.
// 9.3. Добавьте обработчик событий (желательно сослаться на функцию, которую создадиите) на ваш товар (не обязательно на этот раз на весь контейнер товаров, можно каждому отдельно в цикле). Пусть он пока выводит алерт с именем товара.
// 9.4. Продуймате, как будет реализовываться добавление в корзину (localStorage). Подсказки будут.
// 10.Инструкция по созданию функции addToCart. Эта функция - обработчик, как раз будет добавлять в корзину.

// - Получение корзины покупок из localStorage:
// let cart = JSON.parse(localStorage.getItem("cart")) || {};
// Используйте JSON.parse для преобразования строки из localStorage в объект.
// Если корзина пустая, инициализируйте пустой объект {}.
// - Проверка наличия продукта в корзине:
// if (cart[product.id]) {
//   cart[product.id].amount += 1;
// } else {
//   cart[product.id] = { ...product, amount: 1 };
// }
// //    - Если продукт уже в корзине, увеличьте его количество (amount) на 1.  
// //    - Если продукта нет, добавьте его в корзину с количеством 1.
// - Сохранение обновленной корзины:
// localStorage.setItem("cart", JSON.stringify(cart));
// Преобразуйте объект корзины в строку с помощью JSON.stringify и сохраните его в localStorage.
// - Обновление отображения количества товаров:
// updateCartCount();
// Вызовите функцию updateCartCount для обновления отображения количества товаров в корзине.

// 11.Инструкция по созданию функции updateCartCount. Эта функция вызывается в пункте выше (и не только). Она будет поддерживать в актуальном состоянии индикатор количества наших товаров в корзине.
// 1.Получение корзины покупок из localStorage:
// const cart = JSON.parse(localStorage.getItem("cart")) || {};
// Получите текущую корзину из localStorage.
// 2.Инициализация счетчика товаров:
// let itemCount = 0;
// 3.Подсчет общего количества товаров:
// for (const key in cart) {
//   if (cart.hasOwnProperty(key)) {
//     itemCount += cart[key].amount;
//   }
// }
// // Пройдитесь по всем товарам в корзине и сложите их количество.
// 4.Обновление интерфейса (внимание, у меня это отдельный спан, у ваш это может быть ваш какой-то элемент): document.querySelector(".cart span").textContent = itemCount;
// Обновите текстовое содержимое элемента .cart span, чтобы отобразить общее количество товаров.

// Третий блок

// 12.Переходим к этому блоку тогда, когда нас устраивает работа основной страницы и нашего localStorage. Теперь мы создаём страницу корзины.
// Начните с того, что сделайте там такой же хэдер, стили для него такие же, оформите ваш боди так, чтобы адаптивность была
// такой же, как на основной странице, чтобы фон ваш (если есть) располагался так, как нужно.
// 13.Затем начинаем создавать корзину реальную. Первое что нам нужно - добавить в наш боди ПРИМЕРНО такой код:
// <div class="container-products">
//   <div class="product-header">
//     <h5 class="product-title">PRODUCT</h5>
//     <h5 class="price">PRICE</h5>
//     <h5 class="quantity">QUANTITY</h5>
//     <h5 class="total">TOTAL</h5>
//   </div>
//   <div class="products">
//   <!-- Здесь будут продукты -->
//   </div>
// </div>
// 14.Мы получили шапку нашей корзины, оформляем так, чтобы она выглядела адекватно и при пустой корзине.
// 15.Дальнейшая работа будет вестись в js. Рекомендую подключить другой js файл и в нём писать логику. Начинаем добавлять товары. 
// Сначала нужно получить данные из localStorage. Привычным образом их "распарсить" - превратить в объект.
// 16.Находим наш div class="products" в js, чтобы дальше с ним работать.
// 17.Пишем код, который будет обновлять нашу корзину. Логика уже известна: перебираем наши объекты, полученные из JSON, и добавляем в наш div class="products".

let productsJSON = `[
{ "name": "Стетоскоп", 
 "id": "stet",
 "price": "500",
"image" : "stet.jpg"
},

{ "name": "Термометр", 
 "id": "term",
 "price": "250",
 "image" : "term.jpg"
 },
 
 { "name": "Небулайзер", 
 "id": "neb",
 "price": "2000",
 "image" : "neb.jpg"
 },

 { "name": "Дарсонваль", 
 "id": "dars",
 "price": "3500",
 "image" : "dars.jpg"
 },

{ "name": "Кварцевая лампа", 
 "id": "kvarc",
 "price": "2900",
 "image" : "kvarc.jpg"
 },


{ "name": "Алкотестер", 
 "id": "alc",
 "price": "3000",
 "image" : "alc.jpg"
 },

 { "name": "Негатоскоп", 
 "id": "negat",
 "price": "3000",
 "image" : "negat.jpg"
 },

 { "name": "Облучатель", 
 "id": "obl",
 "price": "4000",
 "image" : "obl.jpg"
 },

 { "name": "Тонометр", 
 "id": "ton",
 "price": "2500",
"image" : "ton.jpg"
}
]`;

let products = JSON.parse(productsJSON);
let items = document.querySelector("#items");

for (let product of products) {
  let div = document.createElement("div");
  // console.log(`${product.id}.jpg`);
  div.className = "product";

  let img = document.createElement("img");
  img.src = `${product.id}.jpg`;
  items.append(div);
  div.append(img);

  let h2 = document.createElement("h2");
  h2.textContent = product.name;
  div.append(h2);

  let p = document.createElement("p");
  p.textContent = `${product.price} ₽`;
  div.append(p);

/*   let button = document.createElement("div");
  button.className = "addButton";  
  button.textContent = "В корзину";
 */

// <img class="bask" src="basket.png"></img>
  let button = document.createElement("img");
  button.className = "addButton";
  button.src = "basket2.png";
 

div.append(button);

  button.onclick = () => addToCart(product);
}

//обработчик добавления в корзину
function addToCart(product) {
  let cart = JSON.parse(localStorage.getItem("cart")) || {};
  if (cart[product.id]) {
    cart[product.id].amount += 1;
  } else {
    cart[product.id] = { ...product, amount: 1 };
  }
  //   - Если продукт уже в корзине, увеличьте его количество (amount) на 1.
  // - Если продукта нет, добавьте его в корзину с количеством 1.

  localStorage.setItem("cart", JSON.stringify(cart));
  updateCartCount();
}

//обновление цифры в корзине
function updateCartCount() {
  const cart = JSON.parse(localStorage.getItem("cart")) || {};
  let itemCount = 0;

  for (const key in cart) {
    itemCount += cart[key].amount;
  }

  document.querySelector("#cart-count").textContent = itemCount;
}

// Инициализация корзины товаров
updateCartCount();


 